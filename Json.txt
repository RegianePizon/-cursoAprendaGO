//Json ( Marshall e unmarshal )


// - Partindo do código abaixo, utilize marshal para transformar []user em JSON.

import (
	"encoding/json"
	"fmt"
)
// A primeira letra deve estar em maiusculo para serem descoberto

type User struct {
	First string
	Age   int
}

func main() {
	u1 := User{
		First: "James",
		Age:   32,
	}

	u2 := User{
		First: "Moneypenny",
		Age:   27,
	}

	u3 := User{
		First: "M",
		Age:   54,
	}

	users := []User{u1, u2, u3}

	fmt.Println(users)

	// Codigo que transforma []user em JSON. 

	b, err := json.Marshal(users)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(string(b))
}

// - Partindo do código abaixo, utilize unmarshal e demonstre os valores.

// https://transform.tools/json-to-go - Para transformar 

package main

import (
	"encoding/json"
	"fmt"
)

type unmarshal []struct {
	First   string   `json:"First"`
	Last    string   `json:"Last"`
	Age     int      `json:"Age"`
	Sayings []string `json:"Sayings"`
}

func main() {
	s := `[{"First":"James","Last":"Bond","Age":32,"Sayings":["Shaken, not stirred","Youth is no guarantee of innovation","In his majesty's royal service"]},{"First":"Miss","Last":"Moneypenny","Age":27,"Sayings":["James, it is soo good to see you","Would you like me to take care of that for you, James?","I would really prefer to be a secret agent myself."]},{"First":"M","Last":"Hmmmm","Age":54,"Sayings":["Oh, James. You didn't.","Dear God, what has James done now?","Can someone please tell me where James Bond is?"]}]`
	//fmt.Println(s)

	var valores unmarshal

	err := json.Unmarshal([]byte(s), &valores)
	if err != nil {
		fmt.Println("error:", err)
	}
	fmt.Println(valores)

}

/*
- Partindo do código abaixo, utilize NewEncoder() e Encode() para enviar as informações como JSON para Stdout.
- Desafio: descubra o que é, e utilize, method chaining para conectar os dois métodos acima.
*/

package main

import (
	"encoding/json"
	"fmt"
	"os"
)

type User struct {
	First   string
	Last    string
	Age     int
	Sayings []string
}

func main() {
	u1 := User{
		First: "James",
		Last:  "Bond",
		Age:   32,
		Sayings: []string{
			"Shaken, not stirred",
			"Youth is no guarantee of innovation",
			"In his majesty's royal service",
		},
	}

	u2 := User{
		First: "Miss",
		Last:  "Moneypenny",
		Age:   27,
		Sayings: []string{
			"James, it is soo good to see you",
			"Would you like me to take care of that for you, James?",
			"I would really prefer to be a secret agent myself.",
		},
	}

	u3 := User{
		First: "M",
		Last:  "Hmmmm",
		Age:   54,
		Sayings: []string{
			"Oh, James. You didn't.",
			"Dear God, what has James done now?",
			"Can someone please tell me where James Bond is?",
		},
	}

	users := []User{u1, u2, u3}

	//fmt.Println(users)
	/*
		// Codigo com NewEncoder()
		encoder := json.NewEncoder(os.Stdout)
		encoder.Encode(users)

		// Codigo com Encoder()
		h, err := json.Marshal(users)
		if err != nil {
			fmt.Println(err)
		}
		fmt.Println("Com o Encode():\n", string(h))
	*/
	// #### Com o method chaining ####
	err := json.NewEncoder(os.Stdout).Encode(users)

	if err != nil {
		fmt.Println("erro:", err)
	}
}


